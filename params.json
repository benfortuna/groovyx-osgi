{"google":"","name":"Groovyx-osgi","tagline":"OSGi support for Groovy","body":"# Groovy OSGi modules\r\n\r\n## About\r\n\r\nThe `groovyx.osgi` module provides two packages to make working with OSGi easier. Additionally they are used by the [Grails OSGi plugin](http://github.com/jetztgradnet/grails-osgi-plugin/) from version 0.3 on.\r\n\r\n### groovx.osgi\r\n\r\nThis package contains helper classes to make OSGi programming easier. This package is inspired by [ScalaModules](http://github.com/weiglewilczek/scalamodules/wiki). \r\n\r\nFeatures:\r\n\r\n* simplifies working with OSGi service registry \r\n* safe access to OSGi services, without fear for OSGi dynamics\r\n* Service finder DSL\r\n* OSGi service filter DSL\r\n\r\n**Example:**\r\n\r\n```\r\nimport grooxy.osgi.OsgiCategory\r\n\r\nList results\r\nuse(OsgiCategory) {\r\n\tresults = bundleContext.findServices(MyService).withEachService() { srv ->\r\n\t\tsrv.doSomething()\r\n\t}\r\n}\r\n\r\nresults.each { result -> println result }\r\n```\r\n\r\nSee [groovyx-osgi](http://github.com/jetztgradnet/groovyx-osgi/blob/master/groovyx-osgi/README.textile) for details.\r\n\r\n### groovx.osgi.runtime\r\n\r\nThis package provides an OSGi builder class, `grooxy.osgi.runtime.OsgiRuntimeBuilder`, which can be used to assemble and run an OSGi runtime:\r\n\r\nFeatures:\r\n\r\n* provision bundles from filesystem, web, Maven repositories\r\n* run Eclipse Equinox or Apache Felix OSGi runtimes\r\n* flexible Groovy DSL, fully programmable\r\n* lifecycle callback closures\r\n\r\n*Example:*\r\n\r\n```\r\nimport grooxy.osgi.runtime.OsgiRuntimeBuilder\r\n\r\nOsgiRuntimeBuilder.run {\r\n\tframework 'equinox'\r\n\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.configadmin:1.2.4'\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.fileinstall:3.0.2'\r\n\r\n\tconsole(8023)\r\n\r\n\tdoRun = {\r\n\t\t// wait one minute\r\n\t\tprintln \"stopping OSGi runtime after one minute\"\r\n\t\tThread.sleep 60000\r\n\t}\r\n\r\n\tafterStop = {\r\n\t\tprintln \"stopped OSGi runtime\"\r\n\t}\r\n}\r\n```\r\n\r\nSee [groovyx-osgi-runtime](http://github.com/jetztgradnet/groovyx-osgi/blob/master/groovyx-osgi-runtime/README.textile) for details.\r\n\r\n\r\n## License\r\n\r\nThe Groovy OSGi module is released under the [Apache License 2.0](http://apache.org/licenses/LICENSE-2.0.txt).\r\n\r\n## Building\r\n\r\nSimply run `gradle build`. If [Gradle](http://www.gradle.org) >= 0.9-rc-2 is not installed, run `./gradlew build` from the top-level directory, in order to automatically download the correct Gradle version. The resulting jars can be found at the following locations:\r\n\r\n* `groovyx-osgi/build/libs/groovyx-osgi-0.1.jar`\r\n* `groovyx-osgi-runtime/build/libs/groovyx-osgi-runtime-0.1.jar`\r\n\r\n**Note:** when performing test for groovyx.osgi, please re-create the bundle using `gradle assemble` after changing any code before running the tests, as the tests simply load the jar into the OSGi framework. Changed code is *NOT* picked up automatically!\r\n\r\n## Dependencies\r\n\r\n* Eclipse Equinox 3.6.1 and Apache Felix 3.0.2 OSGi frameworks\r\n* Groovy (tested with 1.7.5)\r\n* Apache Ivy (part of Groovy all-in-one package)\r\n* Apache Commons Logging API\r\n\r\nThe filter support is derived from the [filter4osgi](http://code.google.com/p/filter4osgi/) project and was contributed by [Hamlet D'Arcy](http://hamletdarcy.blogspot.com/). The code is also under the [Apache License 2.0](http://apache.org/licenses/LICENSE-2.0.txt).\r\n\r\nThe dependency resolution code is derived from [Grails](http://grails.org) and was written by [Graeme Rocher](http://twitter.com/graemerocher). The code is also under the [Apache License 2.0](http://apache.org/licenses/LICENSE-2.0.txt).\r\n\r\n## Installation\r\n\r\nSimply drop groovyx-osgi-version.jar and/or groovyx-osgi-runtime-version.jar into your classpath. When using [Grape](http://groovy.codehaus.org/Grape), installation can be omitted altogether. See example below.\r\n\r\n## Usage\r\n\r\n### Simple example\r\n\r\n```\r\nimport grooxy.osgi.runtime.OsgiRuntimeBuilder\r\n\r\ndef osgi = new OsgiRuntimeBuilder()\r\n\r\nosgi.configure {\r\n\t// test alias\r\n\tframework 'equinox'\r\n\r\n\truntimeDir 'system'\r\n\r\n\targs {\r\n\t\tresolverLogLevel = \"warn\"\r\n\t}\r\n\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.fileinstall:3.0.2'\r\n\tbundle group: 'org.apache.felix', name:'org.apache.felix.configadmin', version:'1.2.4'\r\n}\r\ndef runtime = osgi.build()\r\ndef bundleContext = runtime.start()\r\n\r\n// do something\r\n\r\n// shutdown OSGi runtime\r\nruntime.stop()\r\n```\r\n\r\n### More complex example                                                    \r\n\r\nThis standalone script can be run as `groovy myosgi.groovy`.\r\n\r\n**Note**: groovyx.osgi.runtime is not yet available in a maven repository, so it must be included\r\n\t\tin the classpath: `groovy -cp path/to/groovyx.osgi.runtime-version.jar myosgi.groovy`. \r\n\r\n```\r\n// these are necessary for current version (3.6.1) of Equinox\r\n@GrabResolver(name='ebrRelease', root='http://repository.springsource.com/maven/bundles/release')\r\n@GrabResolver(name='ebrExternal', root='http://repository.springsource.com/maven/bundles/external')\r\n@GrabResolver(name='githubJetztgradNet', root='https://github.com/jetztgradnet/repository/raw/master')\r\n@Grapes([\r\n\t@GrabConfig(systemClassLoader=true),\r\n\t@Grab(group='groovyx.osgi', module='groovyx.osgi.runtime', version='0.1'),\r\n\t@Grab(group='org.eclipse.osgi', module='org.eclipse.osgi', version='3.6.1.R36x_v20100806'),\r\n\t@Grab(group='org.apache.commons', module='com.springsource.org.apache.commons.logging', version='1.1.1')\r\n])\r\nimport groovyx.osgi.runtime.OsgiRuntimeBuilder\r\n\r\nOsgiRuntimeBuilder.run {\r\n\tframework 'equinox'\r\n\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.configadmin:1.2.4'\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.fileinstall:3.0.2'\r\n\r\n\tbeforeStart = {\r\n\t\tprintln \"starting OSGi runtime\"\r\n\t}\r\n\r\n\tafterInstallBundles = { runtime ->\r\n\t\tdef bundleContext = runtime.bundleContext\r\n\t\tif (bundleContext) {\r\n\t\t\tprintln \"installed bundles:\"\r\n\t\t\tbundleContext?.bundles?.each { bundle ->\r\n\t\t\t\tprintln \"[${bundle.bundleId}] ${bundle.symbolicName} ${bundle.version}\"\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tprintln \"failed to list bundles\"\r\n\t\t}\r\n\t}\r\n\r\n\tdoRun = {\r\n\t\t// wait one minute\r\n\t\tprintln \"stopping OSGi runtime after one minute\"\r\n\t\tThread.sleep 60000\r\n\t}\r\n\r\n\tafterStop = {\r\n\t\tprintln \"stopped OSGi runtime\"\r\n\t}    \r\n}\r\n```\r\n\r\n### Even more examples\r\n\r\nSee `groovyx-osgi-runtime/examples` for some more examples. They can be executed with the following command:\r\n\r\n```groovy -cp groovyx-osgi-runtime-version.jar groovyx.osgi.runtime.OsgiRuntimeBuilder path/to/script.groovy```\r\n\r\n## Reference           \r\n\r\nAll examples can be run in a fashion similar to the simple example above. For brevity, \r\nonly the configuration closure is included in the following snippets.\r\n\r\n### Provision an OSGi runtime with Eclipse Equinox\r\n\r\n```\r\nosgi.configure {\r\n\tframework 'equinox'\r\n}\r\n```\r\n\r\n### Provision an OSGi runtime with Apache Felix\r\n\r\n```\r\nosgi.configure {\r\n\tframework 'felix'\r\n}\r\n```\r\n\r\n### Provision an OSGi runtime with a custom runtime\r\n\r\n```\r\nosgi.configure {\r\n\tframework MyRuntimeFactory.class\r\n}\r\n```\r\n\r\n`MyRuntimeFactory` should implement `groovyx.osgi.runtime.OsgiRuntimeFactory` and create \r\ninstances of `groovyx.osgi.runtime.OsgiRuntime`, which are usually derived from abstract\r\nbase class `org.codehaus.groovy.osgi.runtime.AbstractOsgiRuntime`.\r\n\r\n### Provision an extisting OSGi runtime, like [Eclipse Virgo](http://eclipse.org/virgo/), [Apache Karaf](http://karaf.apache.org/), or [SpringSource dmServer](http://www.springsource.org/dmserver):\r\n\r\nConfiguration of an external OSGi runtime is performed by provisioning bundles into a drop-in \r\ndirectory, which is monitored by the runtime. Bundles, which are dropped into the directory\r\nare automatically installed and started. The directoy usually resides within the installation\r\ndirectory and is called `dropin`, `load`, or `pickup`.\r\n\r\n```\r\nosgi.configure {\r\n\tframework 'external'\r\n\tdropinsDir /path/to/dropins/dir\r\n}\r\n```\r\n\r\n**Note**: an external runtime can neither be started nor stopped; the `BundleContext` is not available.\r\n\r\n### Installing bundles from files and URLs\r\n\r\n```\r\nosgi.configure {\r\n\tbundle 'file:///path/to/bundle.jar'\r\n\tbundle 'http://host.domain.com/path/to/bundle.jar'\r\n}\r\n```\r\n\r\nBundles from non-local locations are cached by the framework, until deleted with `clean()` (see below).\r\n\r\n### Installing bundles from Maven repositories\r\n\r\nBundles with `mvn:` URL scheme are resolved via built-in Ivy support, which is derived from Grails' excellent Maven and Ivy support [Grails dependency resolution](http://grails.org/doc/latest/guide/3.%20Configuration.html#3.7%20Dependency%20Resolution).\r\n\r\nThe `mvn:` URL consists of a group id, module name, and version. Transitive dependencies are not resolved,\r\nas all artifacts must be valid OSGi bundles.\r\n\r\n```\r\nosgi.configure {\r\n\tbundle 'mvn:group:module:version'\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.configadmin:1.2.4'\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.fileinstall:3.0.2'\r\n\tbundle group:'org.apache.felix', name:'org.apache.felix.fileinstall', version:'3.0.2'\r\n}\r\n```\r\n\r\n**Note**: at first start the bundles are stored in the disk cache in `~/.ivy2/cache`, which may take some time, while Ivy is downloading the Internet...\r\n\r\n### Configure additional Maven or Ivy repositories\r\n\r\nBy default, all bundles are resolved against Maven Central, SpringSource Enterprise Bundle Repository (EBR), and some other Spring repos. Additional repos can be configured like this:\r\n\r\n```\r\nosgi.configure {\r\n\trepositories {\r\n\t\tmavenLocal()\r\n\t\tebr()\r\n\t\tmavenCentral()\r\n\r\n\t\tmavenRepo 'http://s3.amazonaws.com/maven.springframework.org/osgi'\r\n\t\tmavenRepo 'http://s3.amazonaws.com/maven.springframework.org/milestone'\r\n\t}\r\n\tbundle 'mvn:group:module:version'\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.configadmin:1.2.4'\r\n\tbundle 'mvn:org.apache.felix:org.apache.felix.fileinstall:3.0.2'\r\n\tbundle group:'org.apache.felix', name:'org.apache.felix.fileinstall', version:'3.0.2'\r\n}\r\n```\r\n\r\nPlease consult the [Grails docs](http://grails.org/doc/latest/guide/3.%20Configuration.html#3.7.2%20Dependency%20Repositories) for repository configuration.\r\n\r\n\r\n### Clean cached configuration on start\r\n\r\nThe OSGi runtime caches bundles, framework settings and user data. This can be cleaned on startup.\r\n\r\n```\r\nosgi.configure {\r\n\tclean()\r\n}\r\n```\r\n\r\n### Clean cached configuration on start and recreate runtime directory\r\n\r\nAdditional the provisioned framework can be removed altogether before startup.\r\n\r\n```\r\nosgi.configure {\r\n\tclean(true)\r\n}\r\n```\r\n\r\n**Note**: don't do this for an external framework, as this might delete the framework's installation directory!\r\n\r\n###Open OSGi console\r\n\r\nThe OSGi console offers shell commands to inspect state and inner workings of the framework.\r\n\r\n```\r\nosgi.configure {\r\n\tconsole()\r\n}\r\n```\r\n\r\n### Open OSGi console on network port\r\n\r\n```\r\nosgi.configure {\r\n\tconsole(8023)\r\n}\r\n```\r\n\r\n### Configure Felix WebConsole\r\n\r\nThe [Felix Web Console](http://felix.apache.org/site/apache-felix-web-console.html) offers great insight into the OSGi framework.\r\n\r\n```\r\nosgi.configure {\r\n\twebConsole()\r\n}\r\n```\r\n\r\nor with custom port number:\r\n\r\n```\r\nosgi.configure {\r\n\twebConsole(8081)\r\n}\r\n```\r\n\r\nThe application can be accessed at http://localhost:8081/system/console/ with user \"admin\" and password \"admin\".\r\n\r\n**Note:** currently the required dependencies to run the web console need to be added manually (see `examples/extended.groovy` for an example). Future releases will add all required bundles automatically.\r\n\r\n### Use Callback methods\r\n\r\nThe `OsgiRuntimeBuilder` offers some lifecycle callback methods (or rather closures), which are called for certain events.\r\n\r\n```\r\nosgi.configure {\r\n\tdoRun = { runtime ->\r\n\t\tdef bundleContext = runtime.bundleContext\r\n\t\t// do something\r\n\t}\r\n}\r\n```\r\n\r\nThe following callback methods are provided:\r\n\r\n* beforeStart: called before the framework is started.\r\n* afterStart: called after the framework has been started.\r\n* beforeInstallBundles: called before a bunch of bundles is installed.\r\n* afterInstallBundles: called after a bunch of bundles has been installed.\r\n* doRun: called after the framework has been started. When the closure returns, the framework is stopped.\r\n* beforeStop: called before the framework is stopped.\r\n* afterStop: called after the framework has been stopped.\r\n\r\nAll callbacks except `beforeStart` and `afterStop` are supplied with the `OsgiRuntime` as argument. The `BundleContext` can be obtained with `runtime.bundleContext`.\r\n\r\n### Loading configuration from different sources\r\n\r\n`OsgiRuntimeBuilder` 's `configure()` method supports several source types:\r\n\r\n* groovy.lang.Closure\r\n\tThe closure can use the OSGi runtime DSL.\r\n* groovy.lang.Script\r\n\tThe script is executed with a binding containing a builder instance as property `builder` and the builder's `configure()` method.\r\n* java.io.Reader \r\n\tThe reader's content is loaded as Groovy Script\r\n* java.io.InputStream\r\n\tThe stream's content is loaded as Groovy Script\r\n* java.io.File\r\n\tThe file's content is loaded as Groovy Script\r\n* java.net.URL\r\n\tThe URL's content is loaded as Groovy Script\r\n* java.lang.CharSequence (String, GString)\r\n\tIf the string is a URL, it is handled as URL (see above).\r\n\tOtherwise, the string's content is loaded as Groovy Script\r\n* Array or List containing any of the above\r\n\tEach item is handled according to its type (see above)\r\n\r\n### Groovy script support\r\n\r\n`OsgiRuntimeBuilder` can be called with a script as parameter:\r\n\r\n<code>groovy -cp groovyx-osgi-runtime-version.jar groovyx.osgi.runtime.OsgiRuntimeBuilder path/to/script.groovy</code>\r\n\r\nThe script is executed with a `Binding` containing a builder instance as property `builder` and \r\nthe builder's `configure()` method.\r\n\r\n`OsgiRuntimeBuilder` also has a static `run()` method which creates an instance if `OsgiRuntimeBuilder`,\r\nconfigures it with all arguments (which are either handled as URLs or as DSL script), starts the runtime\r\nand waits for it to shutdown.\r\n\r\n## Roadmap                                             \r\n\r\n### groovyx.osgi\r\n\r\n* implement OsgiCategory and extend `BundleContext` with some convenience methods and filter DSL\r\n* improve docs\r\n\r\n### groovyx.osgi.runtime\r\n\r\n* add support for pre-defined provisioning profiles\r\n* add support for OSGi ConfigurationAdmin\r\n* improve handling of external OSGi runtimes\r\n* improve docs\r\n\r\n## History\r\n\r\n### 0.1 (2010-12-22)\r\n\r\n* initial version\r\n\r\n\r\n## How it works\r\n\r\nThe `OsgiRuntimeBuilder` collects bundles to be installed, runtime properties, and other information and delegates creation of the framework to an `OsgiRuntimeFactory`, which creates an `OsgiRuntime`, which in turn creates and starts the actual OSGi framework.\r\n\r\n## Getting around the OSGi runtime\r\n\r\n### Web Console\r\n\r\nThe [Felix Web Management Console](http://felix.apache.org/site/apache-felix-web-console.html) provides excellent insight into the inner workings. When using `webConsole()` or `webConsole(<port>)` in your configuration script, it can be accessed at http://localhost:8080/system/console/ with user \"admin\" and password \"admin\".\r\n(*Note*: the initial release is missing automatic inclusion of dependencies required to run Web Console. See script `src/main/resources/extended.groovy` for an example with all dependencies)\r\n\r\n### Shell Console\r\n\r\nWhen using `console()`, the user is dropped into the Equinox or Felix Shell (press `RETURN` if you don't see the `osgi>` prompt). Calling `console(<port>)` opens a console with telnet access on the specified port or on port `8023`, if omitted. Only a single user can use the console at any time.\r\n\r\nTyping `help` shows the available commands:\r\n\r\n```\r\nosgi> help\r\n---Controlling the OSGi framework---\r\n\tlaunch - start the OSGi Framework\r\n\tshutdown - shutdown the OSGi Framework\r\n\tclose - shutdown and exit\r\n\texit - exit immediately (System.exit)\r\n\tinit - uninstall all bundles\r\n\tsetprop <key>=<value> - set the OSGi property\r\n---Controlling Bundles---\r\n\tinstall - install and optionally start bundle from the given URL\r\n\tuninstall - uninstall the specified bundle(s)\r\n\tstart - start the specified bundle(s)\r\n\tstop - stop the specified bundle(s)\r\n\trefresh - refresh the packages of the specified bundles\r\n\tupdate - update the specified bundle(s)\r\n---Displaying Status---\r\n\tstatus [-s [<comma separated list of bundle states>]  [<segment of bsn>]] - display installed bundles and registered services\r\n\tss [-s [<comma separated list of bundle states>]  [<segment of bsn>]] - display installed bundles (short status)\r\n\tservices [filter] - display registered service details\r\n\tpackages [<pkgname>|<id>|<location>] - display imported/exported package details\r\n\tbundles [-s [<comma separated list of bundle states>]  [<segment of bsn>]] - display details for all installed bundles\r\n\tbundle (<id>|<location>) - display details for the specified bundle(s)\r\n\theaders (<id>|<location>) - print bundle headers\r\n\tlog (<id>|<location>) - display log entries\r\n---Extras---\r\n\texec <command> - execute a command in a separate process and wait\r\n\tfork <command> - execute a command in a separate process\r\n\tgc - perform a garbage collection\r\n\tgetprop  [ name ] - displays the system properties with the given name, or all of them.\r\n---Controlling Start Level---\r\n\tsl [<id>|<location>] - display the start level for the specified bundle, or for the framework if no bundle specified\r\n\tsetfwsl <start level> - set the framework start level\r\n\tsetbsl <start level> (<id>|<location>) - set the start level for the bundle(s)\r\n\tsetibsl <start level> - set the initial bundle start level\r\n---Controlling the Profiling---\r\n\tprofilelog - Display & flush the profile log messages\r\n---Eclipse Runtime commands---\r\n\tdiag - Displays unsatisfied constraints for the specified bundle(s).\r\n\tenableBundle - enable the specified bundle(s)\r\n\tdisableBundle - disable the specified bundle(s)\r\n\tdisabledBundles - list disabled bundles in the system\r\n---Controlling the Console---\r\n\tmore - More prompt for console output\r\n```\r\n\r\nThe command `ss` (for short status) shows all bundles with their respective state:\r\n\r\n```\r\nosgi> ss\r\n \r\nFramework is launched.\r\n \r\nid\tState       Bundle\r\n0\tACTIVE      org.eclipse.osgi_3.6.0.v20100517\r\n1\tACTIVE      org.eclipse.osgi.util_3.2.100.v20100503\r\n2\tACTIVE      org.eclipse.osgi.services_3.2.100.v20100503\r\n3\tACTIVE      org.eclipse.equinox.common_3.6.0.v20100503\r\n4\tACTIVE      org.apache.felix.configadmin_1.2.4\r\n5\tACTIVE      org.apache.felix.fileinstall_2.0.8\r\n6\tACTIVE      com.springsource.org.apache.log4j_1.2.15\r\n7\tACTIVE      org.ops4j.pax.logging.pax-logging-api_1.4.0\r\n8\tACTIVE      org.ops4j.pax.logging.pax-logging-service_1.4.0\r\n9\tACTIVE      com.springsource.javax.annotation_1.0.0\r\n10\tACTIVE      com.springsource.javax.el_1.0.0\r\n11\tACTIVE      com.springsource.javax.ejb_3.0.0\r\n12\tACTIVE      com.springsource.javax.mail_1.4.1\r\n13\tACTIVE      com.springsource.javax.persistence_1.99.0\r\n14\tACTIVE      com.springsource.javax.transaction_1.1.0\r\n15\tACTIVE      com.springsource.javax.servlet_2.5.0\r\n16\tACTIVE      com.springsource.javax.servlet.jsp_2.1.0\r\n17\tACTIVE      com.springsource.javax.servlet.jsp.jstl_1.2.0\r\n18\tACTIVE      com.springsource.javax.jms_1.1.0\r\n19\tACTIVE      com.springsource.javax.xml.rpc_1.1.0\r\n20\tACTIVE      com.springsource.org.mortbay.jetty.server_6.1.9\r\n21\tACTIVE      com.springsource.org.mortbay.util_6.1.9\r\n22\tACTIVE      org.springframework.osgi.jetty.start.osgi_1.0.0\r\n23\tRESOLVED    org.springframework.osgi.jetty.web.extender.fragment.osgi_1.0.1\r\n\t            Master=85\r\n24\tACTIVE      org.apache.felix.http.jetty_2.0.4\r\n25\tACTIVE      com.springsource.org.apache.commons.beanutils_1.8.0\r\n26\tACTIVE      com.springsource.org.apache.commons.collections_3.2.1\r\n27\tACTIVE      com.springsource.org.apache.commons.codec_1.3.0\r\n28\tACTIVE      com.springsource.org.apache.commons.dbcp_1.2.2.osgi\r\n29\tACTIVE      com.springsource.org.apache.commons.el_1.0.0\r\n30\tACTIVE      com.springsource.org.apache.commons.digester_1.8.1\r\n31\tACTIVE      com.springsource.org.apache.commons.fileupload_1.2.1\r\n32\tACTIVE      com.springsource.org.apache.commons.httpclient_3.1.0\r\n33\tACTIVE      com.springsource.org.apache.commons.io_1.4.0\r\n34\tACTIVE      com.springsource.org.apache.commons.lang_2.4.0\r\n35\tACTIVE      com.springsource.org.apache.commons.pool_1.5.3\r\n36\tACTIVE      com.springsource.org.apache.commons.validator_1.3.1\r\n37\tACTIVE      com.springsource.org.apache.oro_2.0.8\r\n38\tACTIVE      com.springsource.org.apache.ivy_2.1.0\r\n39\tACTIVE      com.springsource.org.apache.tools.ant_1.7.1\r\n40\tACTIVE      com.springsource.antlr_2.7.7\r\n41\tACTIVE      com.springsource.org.dom4j_1.6.1\r\n42\tACTIVE      com.springsource.org.aspectj.runtime_1.6.8.RELEASE\r\n43\tACTIVE      com.springsource.org.aspectj.weaver_1.6.8.RELEASE\r\n44\tACTIVE      com.springsource.com.opensymphony.sitemesh_2.4.1\r\n45\tACTIVE      com.springsource.javassist_3.9.0.GA\r\n46\tACTIVE      com.springsource.org.objectweb.asm_1.5.3\r\n47\tACTIVE      com.springsource.org.jboss.cache_3.2.0.GA\r\n48\tACTIVE      com.springsource.org.jboss.util_2.2.13.GA\r\n49\tACTIVE      com.springsource.org.jboss.logging_2.0.5.GA\r\n50\tACTIVE      com.springsource.org.jgroups_2.5.1\r\n51\tACTIVE      com.springsource.net.sf.ehcache_1.6.2\r\n52\tACTIVE      com.springsource.org.hibernate.annotations.common_3.3.0.ga\r\n53\tRESOLVED    com.springsource.org.hibernate.annotations_3.4.0.GA\r\n\t            Master=54\r\n54\tACTIVE      com.springsource.org.hibernate_3.3.2.GA\r\n\t            Fragments=53\r\n55\tACTIVE      com.springsource.org.xmlpull_1.1.4.c\r\n56\tRESOLVED    com.springsource.org.apache.xerces_2.9.1\r\n\t            Master=60\r\n57\tACTIVE      com.springsource.org.apache.xalan_2.7.1\r\n58\tACTIVE      com.springsource.org.apache.xml.serializer_2.7.1\r\n59\tACTIVE      com.springsource.org.apache.xml.resolver_1.2.0\r\n60\tACTIVE      com.springsource.org.apache.xmlcommons_1.3.4\r\n\t            Fragments=56\r\n61\tACTIVE      com.springsource.org.apache.xml.security_1.4.2\r\n62\tACTIVE      org.springframework.aop_3.0.3.RELEASE\r\n63\tACTIVE      org.springframework.asm_3.0.3.RELEASE\r\n64\tACTIVE      org.springframework.aspects_3.0.3.RELEASE\r\n65\tACTIVE      org.springframework.beans_3.0.3.RELEASE\r\n66\tACTIVE      org.springframework.context_3.0.3.RELEASE\r\n67\tACTIVE      org.springframework.context.support_3.0.3.RELEASE\r\n68\tACTIVE      org.springframework.core_3.0.3.RELEASE\r\n69\tACTIVE      org.springframework.expression_3.0.3.RELEASE\r\n70\tACTIVE      org.springframework.instrument_3.0.3.RELEASE\r\n71\tACTIVE      org.springframework.jdbc_3.0.3.RELEASE\r\n72\tACTIVE      org.springframework.jms_3.0.3.RELEASE\r\n73\tACTIVE      org.springframework.orm_3.0.3.RELEASE\r\n74\tACTIVE      org.springframework.oxm_3.0.3.RELEASE\r\n75\tACTIVE      org.springframework.transaction_3.0.3.RELEASE\r\n76\tACTIVE      org.springframework.web_3.0.3.RELEASE\r\n77\tACTIVE      org.springframework.web.servlet_3.0.3.RELEASE\r\n78\tACTIVE      com.springsource.org.aopalliance_1.0.0\r\n79\tACTIVE      com.springsource.net.sf.cglib_2.2.0\r\n80\tACTIVE      org.springframework.osgi.core_2.0.0.M1\r\n81\tACTIVE      org.springframework.osgi.extender_2.0.0.M1\r\n82\tACTIVE      org.springframework.osgi.io_2.0.0.M1\r\n83\tINSTALLED   org.springframework.osgi.test_2.0.0.M1\r\n84\tACTIVE      org.springframework.osgi.web_2.0.0.M1\r\n85\tACTIVE      org.springframework.osgi.web.extender_2.0.0.M1\r\n\t            Fragments=23\r\n86\tINSTALLED   org.grails.osgi_1.3.2\r\n87\tINSTALLED   org.grails.crud_1.3.2\r\n88\tINSTALLED   org.grails.gorm_1.3.2\r\n89\tINSTALLED   org.grails.resources_1.3.2\r\n90\tINSTALLED   org.grails.spring_1.3.2\r\n91\tINSTALLED   org.grails.web_1.3.2\r\n92\tACTIVE      gant_1.9.1\r\n93\tACTIVE      groovy-all_1.7.3\r\n94\tACTIVE      gant_1.9.2\r\n95\tACTIVE      org.apache.felix.webconsole_2.0.2\r\n96\tACTIVE      tripper_0.1.0\r\nosgi>     \r\n```","note":"Don't delete this file! It's used internally to help with page regeneration."}